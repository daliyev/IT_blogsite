[{"model": "admin.logentry", "pk": 1, "fields": {"action_time": "2024-01-10T12:55:16.142Z", "user": 1, "content_type": 7, "object_id": "1", "object_repr": "Model field reference PB", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 2, "fields": {"action_time": "2024-01-10T13:37:45.218Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Slug not working DF", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 3, "fields": {"action_time": "2024-01-10T14:56:48.277Z", "user": 1, "content_type": 7, "object_id": "3", "object_repr": "PB - Django error admin.E033: username", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 4, "fields": {"action_time": "2024-01-11T17:29:26.535Z", "user": 1, "content_type": 7, "object_id": "4", "object_repr": "How to Build a Personal Brand as a Developer", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 5, "fields": {"action_time": "2024-01-11T17:31:23.265Z", "user": 1, "content_type": 7, "object_id": "5", "object_repr": "My solopreneur story: $0 to $65,000/month in 2 years", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 6, "fields": {"action_time": "2024-01-11T17:32:54.029Z", "user": 1, "content_type": 7, "object_id": "6", "object_repr": "How I Won Singapore’s GPT-4 Prompt Engineering Competition", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 7, "fields": {"action_time": "2024-01-11T17:34:02.245Z", "user": 1, "content_type": 7, "object_id": "7", "object_repr": "Take Your Django Development to New Heights: Advanced Patterns and Strategies for Enterprise-Grade Web Applications", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 8, "fields": {"action_time": "2024-01-11T17:35:37.768Z", "user": 1, "content_type": 7, "object_id": "8", "object_repr": "Django Optimization Guide: Make Your App Run 10X Faster", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 9, "fields": {"action_time": "2024-01-11T17:36:40.983Z", "user": 1, "content_type": 7, "object_id": "8", "object_repr": "Django Optimization Guide: Make Your App Run 10X Faster", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 10, "fields": {"action_time": "2024-01-12T18:56:45.890Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Slug not working", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Tags\"]}}]"}}, {"model": "admin.logentry", "pk": 11, "fields": {"action_time": "2024-01-12T19:29:40.610Z", "user": 1, "content_type": 7, "object_id": "3", "object_repr": "Django error admin.E033: username", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Tags\"]}}]"}}, {"model": "admin.logentry", "pk": 12, "fields": {"action_time": "2024-01-12T19:30:06.156Z", "user": 1, "content_type": 7, "object_id": "4", "object_repr": "How to Build a Personal Brand as a Developer", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Tags\"]}}]"}}, {"model": "admin.logentry", "pk": 13, "fields": {"action_time": "2024-01-12T19:30:25.304Z", "user": 1, "content_type": 7, "object_id": "6", "object_repr": "How I Won Singapore’s GPT-4 Prompt Engineering Competition", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Tags\"]}}]"}}, {"model": "admin.logentry", "pk": 14, "fields": {"action_time": "2024-01-12T19:30:50.184Z", "user": 1, "content_type": 7, "object_id": "8", "object_repr": "Django Optimization Guide: Make Your App Run 10X Faster", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Tags\"]}}]"}}, {"model": "admin.logentry", "pk": 15, "fields": {"action_time": "2024-01-14T08:05:57.917Z", "user": 1, "content_type": 7, "object_id": "9", "object_repr": "Say Goodbye to Loops in Python, and Welcome Vectorization!", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 16, "fields": {"action_time": "2024-01-14T16:55:13.091Z", "user": 1, "content_type": 7, "object_id": "1", "object_repr": "Model field reference", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 17, "fields": {"action_time": "2024-01-14T16:57:10.877Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Slug not working", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Status\"]}}]"}}, {"model": "admin.logentry", "pk": 18, "fields": {"action_time": "2024-01-14T18:48:32.017Z", "user": 1, "content_type": 11, "object_id": "1", "object_repr": "127.0.0.1:8000", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Domain name\", \"Display name\"]}}]"}}, {"model": "admin.logentry", "pk": 19, "fields": {"action_time": "2024-01-15T09:39:09.079Z", "user": 1, "content_type": 4, "object_id": "2", "object_repr": "User1", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 20, "fields": {"action_time": "2024-01-15T09:40:04.823Z", "user": 1, "content_type": 7, "object_id": "10", "object_repr": "Autoescape", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "auth.user", "pk": 1, "fields": {"password": "pbkdf2_sha256$720000$fAUcmHtABLt1VuTH9DDguT$G0WMlo4P2rlUj5b5TiqywoJ4mznIbQYF14j7jGxKc6U=", "last_login": "2024-01-14T08:04:34.408Z", "is_superuser": true, "username": "admin", "first_name": "", "last_name": "", "email": "d@gmail.com", "is_staff": true, "is_active": true, "date_joined": "2024-01-10T09:31:04.822Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 2, "fields": {"password": "pbkdf2_sha256$720000$oH9zJIAsQprVMbn4Yua56p$gYErlJuV250EPuey7RRnEldfafI6ZzOP1bIrGIkAwRw=", "last_login": null, "is_superuser": false, "username": "User1", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2024-01-15T09:39:08.388Z", "groups": [], "user_permissions": []}}, {"model": "sessions.session", "pk": "7eyr6dw1ni2x53ej3uaw2l29qldyh67x", "fields": {"session_data": ".eJxVjEEOwiAUBe_C2hBK-Qgu3fcM5AMPWzU0Ke3KeHdt0oVu38y8lwi8rWPYGpYwZXERnTj9bpHTA3UH-c71Nss013WZotwVedAmhznjeT3cv4OR2_itrVFQBcpFjRKVo4jSg7TjHszJeIJCdzbEgE_e5N5oD-ooG7YOVrw__oM4aA:1rOvSC:SFAQ7BooHlc1mVEvMJLkuD6TRjG9aIfv1811CtTvIH0", "expire_date": "2024-01-28T08:02:48.508Z"}}, {"model": "sessions.session", "pk": "gw3zmq1ltd40nybzl4oiuzv5e942ndtj", "fields": {"session_data": ".eJxVjEEOwiAUBe_C2hBK-Qgu3fcM5AMPWzU0Ke3KeHdt0oVu38y8lwi8rWPYGpYwZXERnTj9bpHTA3UH-c71Nss013WZotwVedAmhznjeT3cv4OR2_itrVFQBcpFjRKVo4jSg7TjHszJeIJCdzbEgE_e5N5oD-ooG7YOVrw__oM4aA:1rNyp2:vyjYH2nAfdE4-AhNhsTrUcmyxqwlSQ-x-SCjB3FgMtc", "expire_date": "2024-01-25T17:26:28.583Z"}}, {"model": "sessions.session", "pk": "m7qvt79wwb6lrgrwb5yhfgr8jaq2i69d", "fields": {"session_data": ".eJxVjEEOwiAUBe_C2hBK-Qgu3fcM5AMPWzU0Ke3KeHdt0oVu38y8lwi8rWPYGpYwZXERnTj9bpHTA3UH-c71Nss013WZotwVedAmhznjeT3cv4OR2_itrVFQBcpFjRKVo4jSg7TjHszJeIJCdzbEgE_e5N5oD-ooG7YOVrw__oM4aA:1rONDI:R9MXeour27G1KenpsIJ-Cvh-Kt9b8kCFYUXEd5YKLRY", "expire_date": "2024-01-26T19:29:08.311Z"}}, {"model": "sessions.session", "pk": "ps5brpkxyctgcsmd19iy9qgo0hyxoozh", "fields": {"session_data": ".eJxVjEEOwiAUBe_C2hBK-Qgu3fcM5AMPWzU0Ke3KeHdt0oVu38y8lwi8rWPYGpYwZXERnTj9bpHTA3UH-c71Nss013WZotwVedAmhznjeT3cv4OR2_itrVFQBcpFjRKVo4jSg7TjHszJeIJCdzbEgE_e5N5oD-ooG7YOVrw__oM4aA:1rOvTu:TtuVWZI1mxjXYFElx7bDq3HmWNWzbC_nSAzswAyB284", "expire_date": "2024-01-28T08:04:34.414Z"}}, {"model": "sessions.session", "pk": "ro5edj9v1g5s1v0xbcwnk0he985d9fyk", "fields": {"session_data": ".eJxVjEEOwiAUBe_C2hBK-Qgu3fcM5AMPWzU0Ke3KeHdt0oVu38y8lwi8rWPYGpYwZXERnTj9bpHTA3UH-c71Nss013WZotwVedAmhznjeT3cv4OR2_itrVFQBcpFjRKVo4jSg7TjHszJeIJCdzbEgE_e5N5oD-ooG7YOVrw__oM4aA:1rNUyT:rX7xMvO4n1y5DqaE7OIpLgqQ2DXNJZuwJT-NGNHRVmk", "expire_date": "2024-01-24T09:34:13.044Z"}}, {"model": "taggit.tag", "pk": 1, "fields": {"name": "django", "slug": "django"}}, {"model": "taggit.tag", "pk": 2, "fields": {"name": "design", "slug": "design"}}, {"model": "taggit.tag", "pk": 3, "fields": {"name": "error", "slug": "error"}}, {"model": "taggit.tag", "pk": 4, "fields": {"name": "slug", "slug": "slug"}}, {"model": "taggit.tag", "pk": 5, "fields": {"name": "E033", "slug": "e033"}}, {"model": "taggit.tag", "pk": 6, "fields": {"name": "admin", "slug": "admin"}}, {"model": "taggit.tag", "pk": 7, "fields": {"name": "brand", "slug": "brand"}}, {"model": "taggit.tag", "pk": 8, "fields": {"name": "marketing", "slug": "marketing"}}, {"model": "taggit.tag", "pk": 9, "fields": {"name": "ml", "slug": "ml"}}, {"model": "taggit.tag", "pk": 10, "fields": {"name": "ai", "slug": "ai"}}, {"model": "taggit.tag", "pk": 11, "fields": {"name": "gpt", "slug": "gpt"}}, {"model": "taggit.tag", "pk": 12, "fields": {"name": "optimization", "slug": "optimization"}}, {"model": "taggit.tag", "pk": 13, "fields": {"name": "dry", "slug": "dry"}}, {"model": "taggit.tag", "pk": 14, "fields": {"name": "python", "slug": "python"}}, {"model": "taggit.tag", "pk": 15, "fields": {"name": "tags", "slug": "tags"}}, {"model": "taggit.taggeditem", "pk": 4, "fields": {"tag": 1, "content_type": 7, "object_id": 2}}, {"model": "taggit.taggeditem", "pk": 5, "fields": {"tag": 4, "content_type": 7, "object_id": 2}}, {"model": "taggit.taggeditem", "pk": 6, "fields": {"tag": 5, "content_type": 7, "object_id": 3}}, {"model": "taggit.taggeditem", "pk": 7, "fields": {"tag": 6, "content_type": 7, "object_id": 3}}, {"model": "taggit.taggeditem", "pk": 8, "fields": {"tag": 8, "content_type": 7, "object_id": 4}}, {"model": "taggit.taggeditem", "pk": 9, "fields": {"tag": 7, "content_type": 7, "object_id": 4}}, {"model": "taggit.taggeditem", "pk": 10, "fields": {"tag": 9, "content_type": 7, "object_id": 6}}, {"model": "taggit.taggeditem", "pk": 11, "fields": {"tag": 10, "content_type": 7, "object_id": 6}}, {"model": "taggit.taggeditem", "pk": 12, "fields": {"tag": 11, "content_type": 7, "object_id": 6}}, {"model": "taggit.taggeditem", "pk": 13, "fields": {"tag": 1, "content_type": 7, "object_id": 8}}, {"model": "taggit.taggeditem", "pk": 14, "fields": {"tag": 12, "content_type": 7, "object_id": 8}}, {"model": "taggit.taggeditem", "pk": 15, "fields": {"tag": 13, "content_type": 7, "object_id": 8}}, {"model": "taggit.taggeditem", "pk": 16, "fields": {"tag": 1, "content_type": 7, "object_id": 9}}, {"model": "taggit.taggeditem", "pk": 17, "fields": {"tag": 14, "content_type": 7, "object_id": 9}}, {"model": "taggit.taggeditem", "pk": 18, "fields": {"tag": 1, "content_type": 7, "object_id": 10}}, {"model": "taggit.taggeditem", "pk": 19, "fields": {"tag": 15, "content_type": 7, "object_id": 10}}, {"model": "blog.post", "pk": 2, "fields": {"title": "Slug not working", "slug": "slug-not-working", "author": 1, "body": "dundant to have two possible values for “no data;” the Django convention is to use the empty string, not NULL. One exception is when a CharField has both unique=True and blank=True set. In this situation, null=True is required to avoid unique constraint violations when saving multiple objects with blank values.", "publish": "2024-01-10T12:55:42Z", "created": "2024-01-10T13:37:45.216Z", "updated": "2024-01-10T13:37:45.216Z", "status": "PB"}}, {"model": "blog.post", "pk": 3, "fields": {"title": "Django error admin.E033: username", "slug": "django-error-admine033-username", "author": 1, "body": "I am creating a custom user model in Django. I have defined a custom user model (users.CustomUser) which subclasses AbstractBaseUser. I have created a custom user manager (users.CustomUserManager) which subclasses BaseUserManager and works properly. I have also created a custom user admin which subclasses UserAdmin since my CustomUser model does not have a username field (it uses 'email' instead).", "publish": "2024-01-10T14:55:40Z", "created": "2024-01-10T14:56:48.276Z", "updated": "2024-01-10T14:56:48.276Z", "status": "PB"}}, {"model": "blog.post", "pk": 4, "fields": {"title": "How to Build a Personal Brand as a Developer", "slug": "how-to-build-a-personal-brand-as-a-developer", "author": 1, "body": "TLDRBuilding a personal brand as a developer can help you stand out, gain credibility, network, and achieve your career goals. To build your personal brand, consider your ambitions and comfort level, embrace your passions and knowledge, create an online presence, build offline buzz, and measure and adapt your strategy.", "publish": "2024-01-11T17:26:31Z", "created": "2024-01-11T17:29:26.534Z", "updated": "2024-01-11T17:29:26.534Z", "status": "PB"}}, {"model": "blog.post", "pk": 5, "fields": {"title": "My solopreneur story: $0 to $65,000/month in 2 years", "slug": "my-solopreneur-story-0-to-65000month-in-2-years", "author": 1, "body": "TLDRA solopreneur shares their journey of going from $0 to $65,000/month in 2 years. They discovered the build-in-public community on Twitter and found inspiration from others working on solo projects. They launched multiple startups and learned valuable skills in coding, SEO, writing, launching, and marketing. After trying Show more", "publish": "2024-01-11T17:29:35Z", "created": "2024-01-11T17:31:23.264Z", "updated": "2024-01-11T17:31:23.264Z", "status": "PB"}}, {"model": "blog.post", "pk": 6, "fields": {"title": "How I Won Singapore’s GPT-4 Prompt Engineering Competition", "slug": "how-i-won-singapores-gpt-4-prompt-engineering-competition", "author": 1, "body": "Last month, I had the incredible honor of winning Singapore’s first ever GPT-4 Prompt Engineering competition, which brought together over 400 prompt-ly brilliant participants, organised by the Government Technology Agency of Singapore (GovTech).\r\n\r\nPrompt engineering is a discipline that blends both art and science — it is as much technical understanding as it is of creativity and strategic thinking. This is a compilation of the prompt engineering strategies I learned along the way, that push any LLM to do exactly what you need and more!", "publish": "2024-01-11T17:32:19Z", "created": "2024-01-11T17:32:54.028Z", "updated": "2024-01-11T17:32:54.028Z", "status": "PB"}}, {"model": "blog.post", "pk": 7, "fields": {"title": "Take Your Django Development to New Heights: Advanced Patterns and Strategies for Enterprise-Grade Web Applications", "slug": "take-your-django-development-to-new-heights-advanced-patterns-and-strategies-for-enterprise-grade-web-applications", "author": 1, "body": "Stepping into the year 2024, Django stands not just as a survivor in the enterprise web application landscape, but rather a thriving force. Its reputation as a go-to platform for businesses of all sizes has solidified, with its resilience and versatility serving as its hallmarks. However, here’s the essence: the Django we know and cherish possesses hidden depths. It’s time to venture beyond the rudiments.\r\n\r\nIn this article, we plunge into the depths of Django. We’re not merely discussing well-worn paths; we’re delving into the cutting-edge strategies and patterns that are quietly transforming enterprise applications. We’ll witness how Django is leveraging big data, accommodating real-time processing demands, and enhancing security in ways you might not anticipate.\r\n\r\nWe’ll also witness how Django is forging strong ties with AI and machine learning, making complex undertakings appear effortless. And with cloud technology taking center stage, we’ll uncover how Django is adapting to this new world, maximizing performance and maintaining agility.\r\n\r\nTherefore, fasten your seatbelts. We’re about to take Django to places you might not have envisioned. This isn’t merely about staying abreast of the times; it’s about pushing the boundaries of what we believe Django can accomplish. Let’s start!\r\n\r\nI’ll interrupt you for a moment, don’t forget to give me a subscription to my new YouTube channel in 2024 there will be some great free tutorial videos coming up, posts will start when I reach 1k subscribers until then I’ll be working on them!", "publish": "2024-01-11T17:32:56Z", "created": "2024-01-11T17:34:02.243Z", "updated": "2024-01-11T17:34:02.243Z", "status": "PB"}}, {"model": "blog.post", "pk": 8, "fields": {"title": "Django Optimization Guide: Make Your App Run 10X Faster", "slug": "django-optimization-guide-make-your-app-run-10x-faster", "author": 1, "body": "Django is a popular and open-source web framework used for building scalable web applications using Python. It is well-known for its clean and pragmatic design that encourages rapid development without need to reinvent the wheel. Django follows the “Don’t Repeat Yourself” (DRY) and “Convention over Configuration” (CoC) principles, which means it encourages developers to write less code by providing sensible defaults and conventions. This helps in maintaining a clean and organized codebase.\r\nWhat is Performance Optimization?\r\nBefore we proceed, it is important to know what performance optimization is and what it isn’t.\r\n\r\nPerformance optimization in Django involves improving the speed and efficiency of your Django web application to ensure that it can handle a large number of requests and provide a responsive user experience. It could include reducing the number of database queries, using efficient query techniques, caching, memory management, code profiling, and so on.\r\n\r\nWhat isn’t Performance Optimization?\r\nOne mistake a lot of developers make is optimizing code before identifying actual performance issues. It is essential to profile and benchmark your code to find bottlenecks before investing time in optimization. Focusing on tiny, insignificant optimizations that have minimal impact on overall performance can lead to complex and less maintainable code.\r\n\r\nCode performance optimization should be about making strategic improvements to code to improve efficiency, while also making sure that the optimization doesn’t have an insignificant impact on the overall performance of your Django application.\r\n\r\nThe purpose of this article is to show you some performance optimization techniques and strategies which you can take advantage of to improve the overall performance of your Django application. Let’s jump right in.\r\n\r\nUse Database Indexing\r\nDjango is well-known as a web framework for building database-driven applications. This means that you would probably need to interact with your database a lot. When working with a large database, creating database indexes could help you retrieve data from your database faster.\r\n\r\nBy default, databases use a sequential scan to fetch data from a database. This means that it would need to scan all the rows in the database to complete a query. The execution time may not be noticeable in relatively small databases, but for a huge database, it might be. Django provides us with a convenient method of creating indexes in our databases. Let’s look at an example:", "publish": "2024-01-11T17:34:04Z", "created": "2024-01-11T17:35:37.767Z", "updated": "2024-01-11T17:35:37.767Z", "status": "PB"}}, {"model": "blog.post", "pk": 9, "fields": {"title": "Say Goodbye to Loops in Python, and Welcome Vectorization!", "slug": "say-goodbye-to-loops-in-python-and-welcome-vectorization", "author": 1, "body": "Loops come to us naturally, we learn about Loops in almost all programming languages. So, by default, we start implementing loops whenever there is a repetitive operation. But when we work with a large number of iterations (millions/billions of rows), using loops is a crime. You might be stuck for hours, to later realize that it won’t work. This is where implementing Vectorisation in Python becomes super crucial.\r\n\r\nWhat is Vectorization?\r\n\r\nVectorization is the technique of implementing (NumPy) array operations on a dataset. In the background, it applies the operations to all the elements of an array or series in one go (unlike a ‘for’ loop that manipulates one row at a time).\r\n\r\nIn this blog, we will look at some of the use cases where we can easily replace Python loops with Vectorization. This will help you save time and become more skillful in coding.\r\n\r\nUSE CASE 1: Finding the Sum of numbers\r\nFirst, we will look at a fundamental example of finding the sum of numbers using loops and Vectorization in Python.\r\n\r\nUsing Loops\r\n\r\nimport time \r\nstart = time.time()\r\n\r\n# iterative sum\r\ntotal = 0\r\n# iterating through 1.5 Million numbers\r\nfor item in range(0, 1500000):\r\n    total = total + item\r\n\r\nprint('sum is:' + str(total))\r\nend = time.time()\r\nprint(end - start)\r\n#1124999250000\r\n#0.14 Seconds\r\nUsing Vectorization\r\n\r\nimport numpy as np\r\n\r\nstart = time.time()\r\n# vectorized sum - using numpy for vectorization\r\n# np.arange create the sequence of numbers from 0 to 1499999\r\nprint(np.sum(np.arange(1500000)))\r\nend = time.time()\r\nprint(end - start)\r\n\r\n##1124999250000\r\n##0.008 Seconds\r\nVectorization took ~18x less time to execute as compared to the iteration using the range function. This difference will become more significant while working with Pandas DataFrame.\r\n\r\nUSE CASE 2: Mathematical Operations (on DataFrame)", "publish": "2024-01-14T08:04:38Z", "created": "2024-01-14T08:05:57.910Z", "updated": "2024-01-14T08:05:57.910Z", "status": "PB"}}, {"model": "blog.post", "pk": 10, "fields": {"title": "Autoescape", "slug": "autoescape", "author": 2, "body": "Controls the current auto-escaping behavior. This tag takes either on or off as an argument and that determines whether auto-escaping is in effect inside the block. The block is closed with an endautoescape ending tag.\r\n\r\nWhen auto-escaping is in effect, all variable content has HTML escaping applied to it before placing the result into the output (but after any filters have been applied). This is equivalent to manually applying the escape filter to each variable.\r\n\r\nThe only exceptions are variables that are already marked as “safe” from escaping, either by the code that populated the variable, or because it has had the safe or escape filters applied.", "publish": "2024-01-15T09:39:14Z", "created": "2024-01-15T09:40:04.816Z", "updated": "2024-01-15T09:40:04.816Z", "status": "PB"}}, {"model": "blog.comment", "pk": 1, "fields": {"post": 8, "name": "Azizbek", "email": "daliyev5797@gmail.com", "body": "Good job broo", "created": "2024-01-12T16:51:23.893Z", "updated": "2024-01-12T16:51:23.893Z", "active": true}}, {"model": "blog.comment", "pk": 2, "fields": {"post": 6, "name": "Valijon", "email": "daliyev5797@gmail.com", "body": "Good work!", "created": "2024-01-13T11:12:15.106Z", "updated": "2024-01-13T11:12:15.106Z", "active": true}}, {"model": "blog.comment", "pk": 5, "fields": {"post": 6, "name": "Murod", "email": "murad@gmail.com", "body": "Boloradi hozi trend ozi AI lar haqida narsa yozish", "created": "2024-01-14T08:26:59.124Z", "updated": "2024-01-14T08:26:59.124Z", "active": true}}, {"model": "sites.site", "pk": 1, "fields": {"domain": "127.0.0.1:8000", "name": "127.0.0.1:8000"}}]